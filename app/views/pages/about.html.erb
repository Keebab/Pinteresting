<h1>About This Site</h1>
<h3>The Why</h3>
<p>For anyone interested in how this test site came about, I recently watched Mattan Griffel's lecture at Internet Week entitled  <%= link_to "How to Teach Yourself Code", "http://youtu.be/T0qAjgQFR4c" %>. In the lecture he makes a number of fairly relevant points about the practical reasons for learning to code. With the world becoming more reliant on web applications and mobile device technology, the ability to define problems and viable solutions is the most important trait for an entrepreneur. While I don't have grand designs for becoming a developer, the ability to produce my own prototypes and deploy them for testing, allows me to be in control of executing my ideas faster. As a personal challenge, it immediately reminded me of one of my favourite quotes from Rebel Without a Crew.</p>
<p><i>“Too many creative people don’t wanna learn how to be technical, so what happens? They become dependent on technical people.  Become technical.  You can learn that. If you’re creative and technical, you’re unstoppable.” Robert Rodriguez - Film Director</i></p>
<h3>The How</h3>
<p>Mattan and his company One Month have a number of courses for learning both HTML and the web application frame-work Ruby on Rails. Looking at the reviews and recommendations, I decided to start their <%= link_to "One Month Rails", "http://mbsy.co/7Gthh" %> course. The brief is to take an absolute coding beginner to developing and deploying a Pinterest clone within thirty days. The results of which you now find yourself on. For myself and anyone interested, I'll reflect on the learning process and my takeaways from the experience</p>
<h3>My Background</h3>
<p>My current work involves web marketing for small business. I have a cursory knowledge of HTML and have several Wordpress sites. I utilise plugins where possible. In terms of understanding what going on "under the hood", I feel I was starting at zero. I'm not sure how someone starting from complete zero would go with this program I feel that anyone reasonably competent on the web and prepared to learn shouldn't have too many problems.</p>
<h3>A Learning Analogy</h3>
<p>Learning to code is a nebulous idea. What does it mean? How much can you conceivably learn in one month? Because the course is project based, the best analogy I can think of is a foreign language like French. To learn French from scratch, where do you start? </p>
<p>One option would be to learn huge chunks of vocabulary, chain various grammar rules together and then try your best to apply them in real life situations. The problem with this approach is you have limited feedback while learning your vocabulary, your grammar rules  may vary depending on the situation that you apply them, and you will most likely make mistakes if you are improvising while learning. It's not to say that this method doesn't work. This is how most people learn foreign languages anyway. Small wins early are essential, especially for someone like me.</p>
<p>A project based approach would be to define a learning outcome like "Take a Bus to restaurant"/Order Steak & Salad/Pay the Bill/Take a Taxi Home". In this learning scenario, you would only learn the vocabulary necessary to complete the tasks in the correct order. Learning the how and why of the grammar rules involved is not necessary to complete the task. Would you be conversational? Of course not. Would you be proficient enough to complete the task like a native speaker? You'd be pretty close. Could you apply yourself to this situation with confidence straight away? I'd say yes.</p>
<p>The second advantage to this learning method is that once you have an idea of the French Framework for these tasks, how easily could you substitute new vocabulary into these tasks with relative ease? Substitute Train to restaurant, order schnitzel instead of steak, change the destination etc. If nothing else, you'd have a better idea of the questions to ask a teacher or native speaker based on your needs. From this perspective, I have a much better understanding of the Rails framework and how to approach problems based on this project. I'm much more confident in asking the right questions and I'm keen to tackle some more advanced projects. Hopefully, this analogy makes sense.</p>
<h3>Tools Needed</h3>
<p>I use a Samsung Chromebook. For those not familiar, it's a browser based laptop. It is not designed to have files natively installed. Everything is run through Chrome apps or cloud based web applications. My biggest fear was that certain elements of the One Month Course would require some form of application installation. I was pleasantly surprised! If you are in a similar situation, all you need is: 
  <li>www.nitrous.io - A browser based Terminal and Text Editor. Nitrous is a clear and intuitive platform that combines Terminal and Text Editor. The code markup is slightly different to Sublime Text but if you start with Nitrous, you would never know the difference. I'm curious to experiment with the collaboration mode where multiple editors can work on code at the same time, similar to a Google Doc.
  <li>Chrome Notepad Extension - Is a simple notepad tab for Chrome. I found it handy to edit code along with the video. If you enter something incorrectly, you will usually see it before you post it to Nitrous. 
  <li>Heroku Account - These pages are hosted on a free Heroku account. Setup and deployment for this is simple and cloud based.    
  <li>Amazon Web Services Hosting - This was easy to setup as long as you have an Amazon account. It hosts the images on the site.</p>
<h3>Frustrations and Challenges</h3>
<p>Throughout the course, you are encouraged to troubleshoot and solve your own problems as much as possible. There were several points were version updates to gemfiles caused issues. In 95% of cases, directly Googling the error will produce a solution. By the end of the process I was much more comfortable searching and trying on my own solutions to issues.</p>
<p>That being said, there were many times when things did not behave as they were supposed to. For newbies like myself, here are some helpful ideas: 
<li>Read the error logs and define a path backwards. Usually the issue will be fairly clear straight away. Think about any layout or controller pages that influence the behaviour of the page. The answer will usually be simple but not always easy to find. 
<li>Enter the error directly into Google and see what comes up. The problem has usually been encountered many times before. Search around and find the answer that seems the most consistently thanked and easiest for you to implement. 
<li>Step away from the laptop. Frustration is not conducive to effective thinking. Devise had me annoyed several times with issues that would not resolve. Taking a short break and relaxing usually put me in a better frame of mind to come back and approach the problem fresh. 
<li>Restart your server. Who knows why this works?? it just seems to make magic happen.
<li>Remember, when all else <%= link_to "fails", "http://24.media.tumblr.com/tumblr_lzv5f0I0Pz1qbs6ydo1_500.jpg" %></p>
<h3>Where to next?</h3>
<p>In terms of what I want to achieve next. 
  <li>I need a better understanding of embedded ruby commands. I think this will come with practice. Its like HTML but different.
  <li>There is still alot of CSS elements that I would like to understand better. The Bootstrap help pages are very clear but its just a matter of adding it to other projects and getting comfortable with it.    
  <li>I want to get better at installing and configuring Gemfiles. Devise caused me a lot of trouble with login settings. The help community resources are very good, but I still don't have the hang of it. 
  <li>I'm aiming to start Michael Hartl's Rails tutorial next, as well as future One Month projects.</p>
<p>Any questions about the project or the process, feel free to email me - positivev@gmail.com</p>